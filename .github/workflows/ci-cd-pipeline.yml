name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: spring-boot-api
  REGION: us-central1

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Validate Maven project
        run: mvn validate

      - name: Static Code Analysis
        run: mvn checkstyle:check

      - name: Build with Maven
        run: mvn -B package -DskipTests

      - name: Run Unit Tests
        run: mvn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        run: docker build -t spring-boot-api:test .

      - name: Run API Tests with Testcontainers
        run: mvn verify -Dskip.unit.tests=true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

  build-and-push-image:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Check downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find target -type f | sort
          ls -la target

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Enable required GCP APIs
        run: |
          gcloud services enable artifactregistry.googleapis.com

      - name: Create Artifact Registry repository if it doesn't exist
        run: |
          gcloud artifacts repositories describe spring-boot-api \
            --location=${{ env.REGION }} \
            --format=none 2>/dev/null || \
          gcloud artifacts repositories create spring-boot-api \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for Spring Boot API"

      - name: Configure Docker for Artifact Registry
        run: |
          # Ensure Docker is available
          docker --version
          # Configure Docker authentication for Artifact Registry
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Docker image
        run: |
          echo "Environment variables:"
          echo "REGION: ${{ env.REGION }}"
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "SERVICE_NAME: ${{ env.SERVICE_NAME }}"

          # Check if the Java artifact exists
          ls -la target

          # Build and push the Docker image with both latest and SHA tags
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/spring-boot-api/${{ env.SERVICE_NAME }}:${{ github.sha }} -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/spring-boot-api/${{ env.SERVICE_NAME }}:latest .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/spring-boot-api/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/spring-boot-api/${{ env.SERVICE_NAME }}:latest

  terraform-plan-and-apply:
    name: Terraform Plan and Apply
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt

      - name: Commit Terraform Format Changes
        # Only run if there are changes to commit
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          if git diff --exit-code --quiet; then
            echo "No changes to commit"
          else
            git add terraform/*.tf
            git commit -m "Apply Terraform formatting"
            git push
          fi
        # This step should only run on pushes to main, not on PRs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_service_name: ${{ env.SERVICE_NAME }}

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_service_name: ${{ env.SERVICE_NAME }}

  deploy:
    name: Deploy to Cloud Run
    needs: terraform-plan-and-apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/spring-boot-api/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Smoke Test Deployment
        run: |
          export SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "Service URL: $SERVICE_URL"
          # Wait for service to be fully deployed
          sleep 30
          # Test health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/actuator/health)
          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "Health check failed with status $HEALTH_STATUS"
            exit 1
          fi

          # Test hello endpoint at the correct path
          echo "Testing endpoint at /api/hello..."
          HELLO_RESPONSE=$(curl -s $SERVICE_URL/api/hello)
          if [[ "$HELLO_RESPONSE" != *"Hello"* ]]; then
            echo "Hello endpoint check failed. Response: $HELLO_RESPONSE"
            exit 1
          fi
          echo "Smoke test passed successfully!"
